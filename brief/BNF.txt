
<Command>        ::=  <CommandType>;

<CommandType>    ::=  <Use> | <Create> | <Drop> | <Alter> | <Insert> |
                      <Select> | <Update> | <Delete> | <Join>

<Use>            ::=  USE <DatabaseName>

<Create>         ::=  <CreateDatabase> | <CreateTable>

<CreateDatabase> ::=  CREATE DATABASE <DatabaseName>

<CreateTable>    ::=  CREATE TABLE <TableName> | CREATE TABLE <TableName> ( <AttributeList> )

<Drop>           ::=  DROP <Structure> <StructureName>

<Structure>      ::=  DATABASE | TABLE

<Alter>          ::=  ALTER TABLE <TableName> <AlterationType> <AttributeName>

<Insert>         ::=  INSERT INTO <TableName> VALUES ( <ValueList> )

<Select>         ::=  SELECT <WildAttribList> FROM <TableName> |
                      SELECT <WildAttribList> FROM <TableName> WHERE <Condition> 

<Update>         ::=  UPDATE <TableName> SET <NameValueList> WHERE <Condition> 

<Delete>         ::=  DELETE FROM <TableName> WHERE <Condition>

<Join>           ::=  JOIN <TableName> AND <TableName> ON <AttributeName> AND <AttributeName>

<NameValueList>  ::=  <NameValuePair> | <NameValuePair> , <NameValueList>

<NameValuePair>  ::=  <AttributeName> = <Value>

<AlterationType> ::=  ADD | DROP

<ValueList>      ::=  <Value>  |  <Value> , <ValueList>

<Value>          ::=  '<StringLiteral>'  |  <BooleanLiteral>  |  <FloatLiteral>  |  <IntegerLiteral>

<BooleanLiteral> ::=  true | false

<WildAttribList> ::=  <AttributeList> | *

<AttributeList>  ::=  <AttributeName> | <AttributeName> , <AttributeList>

<Condition>      ::=  ( <Condition> ) AND ( <Condition> )  |
                      ( <Condition> ) OR ( <Condition> )   |
                      <AttributeName> <Operator> <Value>

<Operator>       ::=   ==   |   >   |   <   |   >=   |   <=   |   !=   |   LIKE


Notes:
If the user doesn’t know a value or doesn’t wish to provide it, they must pass an empty String (i.e. there is no null)
StringLiteral, TableName, ColumnName, DatabaseName are all purely alphanumeric sequences (i.e. a-z, A-Z, 0-9)
StringLiterals may optionally include a range of punctuation EXCEPT single quotes and tabs (and definitely not exotic UTF characters !)
FloatLiterals are in standard notation (i.e. not scientific, not hexidecimal)
The range of numbers (max and min) match those supported by the standard Java int and float types

